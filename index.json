[{"content":"This is the Categories page, where you can explore my posts by category.\n","date":"22 September 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"\u003cp\u003eThis is the \u003cstrong\u003eCategories\u003c/strong\u003e page, where you can explore my posts by category.\u003c/p\u003e","title":"Categories","type":"categories"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/categories/development/","section":"Categories","summary":"","title":"Development","type":"categories"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/tags/frontend/","section":"Tags","summary":"","title":"Frontend","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"This is the Tags page, where you can explore my posts by tag.\n","date":"22 September 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"\u003cp\u003eThis is the \u003cstrong\u003eTags\u003c/strong\u003e page, where you can explore my posts by tag.\u003c/p\u003e\n\u003chr\u003e","title":"Tags","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/tags/vue/","section":"Tags","summary":"","title":"Vue","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/tags/wails/","section":"Tags","summary":"","title":"Wails","type":"tags"},{"content":"","date":"22 September 2025","externalUrl":null,"permalink":"/","section":"Welcome to my bloh!","summary":"","title":"Welcome to my bloh!","type":"page"},{"content":" Introduction # While developing a cross-platform desktop application, I recently encountered a confusing issue:\nThe same Wails app ran smoothly on Windows, but noticeably lagged on Linux distributions like Ubuntu. The symptoms included stuttering animations and slow UI response. At first, I suspected the Wails framework itself, or that my GPU drivers were not properly installed. After careful investigation, I realized neither of those was the cause.\nIt turned out that GPU acceleration is disabled by default on Linux in Wails. To make matters trickier, the official documentation only mentions this inside a long code block, without any comments, making it very easy to miss.\nThis small configuration detail led to a big difference in performance.\nIn this article, I’ll share my debugging process and provide a practical solution that you can apply directly to fix the issue. Hopefully, it saves you time and frustration.\nEnvironment details:\nOS: Ubuntu 24.04.3 LTS Wails: v2.10.2 Go: go1.22.2 linux/amd64 Frontend: Vue 3 + Vite The Solution # Let’s start with the fix.\nSince GPU acceleration is disabled by default on Linux, you need to manually enable it.\nGo to your project root and open main.go (the entry point for configuring and starting Wails). Inside the wails.Run() call, add the following:\n// main.go func main() { ... // Create application with options err := wails.Run(\u0026amp;options.App{ ... Linux: \u0026amp;linux.Options{ WebviewGpuPolicy: linux.WebviewGpuPolicyOnDemand,\t//Enable GPU acceleration on demand }, }) } WebviewGpuPolicyhas three options:\nOption Meaning linux.WebviewGpuPolicyOnDemand Enable GPU acceleration depending on the Webview linux.WebviewGpuPolicyAlways Always enable GPU acceleration linux.WebviewGpuPolicyNever Disable GPU acceleration Choose the one that fits your needs. If you’re curious about why, keep reading.\nBackground # When developing my Wails app on Ubuntu, I used Vuetify.js. As soon as the UI became slightly complex, I noticed:\nChoppy UI animations, such as button/card ripple effects Noticeable input delay (buttons reacting slowly after being clicked) High CPU usage After comparison tests, I found:\nThe same page ran perfectly smooth in Chrome on Ubuntu The same app also ran smoothly on Windows At first, I suspected:\nIncorrect GPU driver installation on Ubuntu A Wails performance issue Testing GPU Acceleration Impact # Even with GPU drivers correctly installed, the problem persisted. I used a WebGL test to confirm:\nEnvironment Page FPS Wails Aquarium ~35 FPS Chrome (GPU enabled) Aquarium ~180 FPS Chrome (GPU disabled) Aquarium ~15 FPS Chrome GPU Off vs Wails # Chrome GPU On vs Wails # The result is clear: Wails was running without GPU acceleration.\nChecking the Official Docs # Looking into theofficial docs, I found this snippet inside Options.App:\nLinux: \u0026amp;linux.Options{ Icon: icon, WindowIsTranslucent: false, WebviewGpuPolicy: linux.WebviewGpuPolicyNever, // GPU acceleration disabled by default ProgramName: \u0026#34;wails\u0026#34; }, After changing the WebviewGpuPolicy, the performance improved immediately: UI animations became smooth, input delay disappeared, and CPU usage dropped — matching the Windows experience.\nLessons Learned # From this debugging process, I discovered:\nOn Linux, Wails disables GPU acceleration by default, while on Windows it is enabled. This can easily cause major performance issues that developers may mistakenly blame on drivers or frameworks. Updating main.go to set WebviewGpuPolicy to linux.WebviewGpuPolicyOnDemand completely solved the issue. You can choose from three GPU policies: OnDemand: Let Webview decide whether to enable GPU Always: Force GPU acceleration on Never: Disable GPU acceleration Practical advice:\nWhen developing cross-platform apps, always check for differences in default settings. Performance issues may stem from defaults rather than actual bugs. Use WebGL or similar tests to quickly verify GPU acceleration. Read the official docs carefully — sometimes the key is hidden in the details. I hope this article helps you fix similar issues.\n","date":"22 September 2025","externalUrl":null,"permalink":"/posts/1758551903657-wails-on-linux-runs-slowly-how-to-fix-frontend-lag-on-ubuntu/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eIntroduction \n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eWhile developing a cross-platform desktop application, I recently encountered a confusing issue:\u003cbr\u003e\nThe same Wails app ran smoothly on Windows, but noticeably lagged on Linux distributions like Ubuntu. The symptoms included stuttering animations and slow UI response. At first, I suspected the Wails framework itself, or that my GPU drivers were not properly installed. After careful investigation, I realized neither of those was the cause.\u003c/p\u003e","title":"Why Wails Apps Lag on Linux: Solving Frontend Performance Issues","type":"posts"},{"content":"","date":"2025-09-22","externalUrl":null,"permalink":"/zh-cn/categories/%E5%BC%80%E5%8F%91/","section":"分类","summary":"","title":"开发","type":"categories"}]